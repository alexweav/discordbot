defmodule DiscordBot.Model.Message do
  @derive [Poison.Encoder]
  @moduledoc """
  Represents a message sent over Discord
  """

  use DiscordBot.Model.Serializable

  alias DiscordBot.Model.{GuildMember, MessageApplication, Reaction, Serializable, User}

  defstruct [
    :id,
    :channel_id,
    :guild_id,
    :author,
    :member,
    :content,
    :timestamp,
    :edited_timestamp,
    :tts,
    :mention_everyone,
    :mentions,
    :mention_roles,
    :attachments,
    :embeds,
    :reactions,
    :nonce,
    :pinned,
    :webhook_id,
    :type,
    :activity,
    :application
  ]

  @typedoc """
  ID of the message
  """
  @type id :: String.t()

  @typedoc """
  ID of the channel the message was sent in
  """
  @type channel_id :: String.t()

  @typedoc """
  ID of the guild the message was sent in
  """
  @type guild_id :: String.t()

  @typedoc """
  The author of this message.
  Not guaranteed to be a valid user
  """
  @type author :: User.t()

  @typedoc """
  Member properties for this message's author
  """
  @type member :: GuildMember.t()

  @typedoc """
  Contents of the message
  """
  @type content :: String.t()

  @typedoc """
  ISO8601 timestamp of when this message was sent
  """
  @type timestamp :: String.t()

  @typedoc """
  ISO8601 timestamp of when this message was edited,
  or `nil` if never edited
  """
  @type edited_timestamp :: String.t() | nil

  @typedoc """
  Whether this was a TTS message
  """
  @type tts :: boolean

  @typedoc """
  Whether this message mentions everyone
  """
  @type mention_everyone :: boolean

  @typedoc """
  Users specifically mentioned in the message
  """
  @type mentions :: list(User.t())

  @typedoc """
  IDs of roles specifically mentioned in the message
  """
  @type mention_roles :: list(String.t())

  @typedoc """
  Attached files
  """
  @type attachments :: list(map)
  # TODO: attachment object

  @typedoc """
  Embedded content
  """
  @type embeds :: list(map)
  # TODO: embed object

  @typedoc """
  Reactions to the message
  """
  @type reactions :: list(Reaction.t())

  @typedoc """
  Used for validating a message was sent
  """
  @type nonce :: String.t() | nil

  @typedoc """
  Whether this message is pinned
  """
  @type pinned :: boolean

  @typedoc """
  If this message is generated by a webhook,
  this is the webhook's ID
  """
  @type webhook_id :: String.t() | nil

  @typedoc """
  Type of message
  """
  @type type :: integer
  # TODO: atoms for message types

  @typedoc """
  Sent with Rich Presence-related chat embeds
  """
  @type activity :: map | nil
  # TODO: message activity object

  @typedoc """
  Sent with Rich Presence-related chat embeds
  """
  @type application :: MessageApplication.t() | nil

  @type t :: %__MODULE__{
          id: id,
          channel_id: channel_id,
          guild_id: guild_id,
          author: author,
          member: member,
          content: content,
          timestamp: timestamp,
          edited_timestamp: edited_timestamp,
          tts: tts,
          mention_everyone: mention_everyone,
          mentions: mentions,
          mention_roles: mention_roles,
          attachments: attachments,
          embeds: embeds,
          reactions: reactions,
          nonce: nonce,
          pinned: pinned,
          webhook_id: webhook_id,
          type: type,
          activity: activity,
          application: application
        }

  @doc """
  Converts a plain map-represnted JSON object `map` into a message
  """
  @spec from_map(map) :: __MODULE__.t()
  def from_map(map) do
    map
    |> Map.update("author", nil, &User.from_map(&1))
    |> Map.update("member", nil, &GuildMember.from_map(&1))
    |> Map.update(
      "mentions",
      nil,
      &Enum.map(&1, fn mention -> User.from_map(mention) end)
    )
    |> Map.update(
      "reactions",
      nil,
      &Enum.map(&1, fn reaction -> Reaction.from_map(reaction) end)
    )
    |> Map.update("application", nil, &MessageApplication.from_map(&1))
    |> Serializable.struct_from_map(as: %__MODULE__{})
  end
end
